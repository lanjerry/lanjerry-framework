#set($saveDTO = "SaveDTO")
#set($updateDTO = "UpdateDTO")
#set($saveOrUpdateDTO = "SaveOrUpdateDTO")
package ${packageName}.service.${moduleName}.impl;

#foreach ($import in $serviceImplImports)
import $import
#end

import org.springframework.stereotype.Service;

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;

/**
 * <p>
 * ${functionName}服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements ${ClassName}Service {
#if($!{tplFunctions})
#if(${tplFunctions.indexOf("pageList")}!=-1)

    @Override
    public IPage<${ClassName}PageVO> page${BusinessName}s(${ClassName}PageDTO dto) {
        IPage<${ClassName}> page = this.lambdaQuery().orderByDesc(${ClassName}::get${PkJavaField})
#foreach($column in $!{queryColumns})
#set($columnQueryType = $column.queryType)
#set($columnJavaField = "get"+$column.upperFirstJavaField+"()")
#set($columnJudge = "dto."+$columnJavaField+ "!= null")
#if($column.javaType=="String")
#set($columnJudge ="StrUtil.isNotBlank(dto."+$columnJavaField+")")
#end
#if($column.queryType=="between"&&$column.javaType=="LocalDateTime")
#set($columnTimeStart = "dto.get"+$column.upperFirstJavaField+"Start()")
#set($columnTimeEnd = "dto.get"+$column.upperFirstJavaField+"End()")
            .ge(StrUtil.isNotBlank($columnTimeStart), ${ClassName}::get$column.upperFirstJavaField, $columnTimeStart + AdminConsts.START_TIME)
            .le(StrUtil.isNotBlank($columnTimeEnd), ${ClassName}::get$column.upperFirstJavaField, $columnTimeEnd + AdminConsts.END_TIME)
#else
            .$columnQueryType($columnJudge, ${ClassName}::get$column.upperFirstJavaField, dto.$columnJavaField)
#end
#set($columnQueryType = "")
#end
            .page(new Page<>(dto.getPageNum(), dto.getPageSize()));
        return BeanCopyUtil.pageCopy(page, ${ClassName}.class, ${ClassName}PageVO.class);
    }
#end
#if(${tplFunctions.indexOf("list")}!=-1)

    @Override
    public List<${ClassName}ListVO> list${BusinessName}s(${ClassName}ListDTO dto) {
        List<${ClassName}> list = this.lambdaQuery().orderByDesc(${ClassName}::get${PkJavaField})
        #foreach($column in $!{queryColumns})
            #set($columnQueryType = $column.queryType)
            #set($columnJavaField = "get"+$column.upperFirstJavaField+"()")
            #set($columnJudge = "dto."+$columnJavaField+ "!= null")
            #if($column.javaType=="String")
                #set($columnJudge ="StrUtil.isNotBlank(dto."+$columnJavaField+")")
            #end
            #if($column.queryType=="between"&&$column.javaType=="LocalDateTime")
                #set($columnTimeStart = "dto.get"+$column.upperFirstJavaField+"Start()")
                #set($columnTimeEnd = "dto.get"+$column.upperFirstJavaField+"End()")
                .ge(StrUtil.isNotBlank($columnTimeStart), ${ClassName}::get$column.upperFirstJavaField, $columnTimeStart + AdminConsts.START_TIME)
        .le(StrUtil.isNotBlank($columnTimeEnd), ${ClassName}::get$column.upperFirstJavaField, $columnTimeEnd + AdminConsts.END_TIME)
            #else
                .$columnQueryType($columnJudge, ${ClassName}::get$column.upperFirstJavaField, dto.$columnJavaField)
            #end
            #set($columnQueryType = "")
        #end
        .list();
        return BeanCopyUtil.listCopy(list, ${ClassName}.class, ${ClassName}ListVO.class);
    }
#end
#if(${tplFunctions.indexOf("update")}!=-1)

    @Override
    public ${ClassName}InfoVO get${BusinessName}(${pkJavaType} ${pkJavaField}) {
        ${ClassName} ori${BusinessName} = this.getById(${pkJavaField});
        ApiAssert.notNull(ori${BusinessName}, String.format("${pkComment}：%s不存在", ${pkJavaField}));
        return BeanCopyUtil.beanCopy(ori${BusinessName}, ${ClassName}InfoVO.class);
    }
#end
#if(${tplFunctions.indexOf("add")}!=-1)

    @Override
    public void save${BusinessName}(${ClassName}#if(${tplFunctions.indexOf("update")}!=-1)${saveOrUpdateDTO}#else${saveDTO}#end dto) {
#foreach($column in $!{onlyColumns})
#set($columnJavaField = "get"+$column.upperFirstJavaField+"()")
        ApiAssert.isTrue(this.count(Wrappers.<${ClassName}>lambdaQuery().eq(${ClassName}::get$column.upperFirstJavaField, dto.$columnJavaField)) == 0, String.format("$column.columnComment：%s已存在", dto.$columnJavaField));
#end
        ${ClassName} ${businessName} = BeanCopyUtil.beanCopy(dto, ${ClassName}.class);
        this.save(${businessName});
    }
#end
#if(${tplFunctions.indexOf("update")}!=-1)

    @Override
    public void update${BusinessName}(${pkJavaType} ${pkJavaField}, ${ClassName}#if(${tplFunctions.indexOf("add")}!=-1)${saveOrUpdateDTO}#else${updateDTO}#end dto) {
        ${ClassName} ori${BusinessName} = this.getById(${pkJavaField});
        ApiAssert.notNull(ori${BusinessName}, String.format("${pkComment}：%s不存在", ${pkJavaField}));
#foreach($column in $!{onlyColumns})
#set($columnJavaField = "get"+$column.upperFirstJavaField+"()")
        ApiAssert.isTrue(this.count(Wrappers.<${ClassName}>lambdaQuery().ne(${ClassName}::get${PkJavaField}, ${pkJavaField}).eq(${ClassName}::get$column.upperFirstJavaField, dto.$columnJavaField)) == 0, String.format("$column.columnComment：%s已存在", dto.$columnJavaField));
#end
        ${ClassName} ${businessName} = BeanCopyUtil.beanCopy(dto, ${ClassName}.class);
        ${businessName}.setId(${pkJavaField});
        this.updateById(${businessName});
    }
#end
#if(${tplFunctions.indexOf("delete")}!=-1)

    @Override
    public void remove${BusinessName}s(${pkJavaType}[] ${pkJavaField}s) {
        for (${pkJavaType} ${pkJavaField} : ${pkJavaField}s) {
            ${ClassName} ori${BusinessName} = this.getById(${pkJavaField});
            ApiAssert.notNull(ori${BusinessName}, String.format("${pkComment}：%s不存在", ${pkJavaField}));
            this.removeById(${pkJavaField});
        }
    }
#end
#end
}